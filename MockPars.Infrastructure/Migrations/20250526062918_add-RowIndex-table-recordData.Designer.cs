// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MockPars.Infrastructure.Context;

#nullable disable

namespace MockPars.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250526062918_add-RowIndex-table-recordData")]
    partial class addRowIndextablerecordData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MockPars.Domain.Models.Columns", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ColumnName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColumnType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FakeDataTypes")
                        .HasColumnType("int");

                    b.Property<int>("TablesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TablesId");

                    b.ToTable("Columns");
                });

            modelBuilder.Entity("MockPars.Domain.Models.Databases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Databases");
                });

            modelBuilder.Entity("MockPars.Domain.Models.RecordData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColumnsId")
                        .HasColumnType("int");

                    b.Property<int>("RowIndex")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ColumnsId");

                    b.ToTable("RecordData");
                });

            modelBuilder.Entity("MockPars.Domain.Models.Tables", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DatabasesId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGet")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGetAll")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPost")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPut")
                        .HasColumnType("bit");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatabasesId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("MockPars.Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MockPars.Domain.Models.Columns", b =>
                {
                    b.HasOne("MockPars.Domain.Models.Tables", "Tables")
                        .WithMany("Columns")
                        .HasForeignKey("TablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("MockPars.Domain.Models.Databases", b =>
                {
                    b.HasOne("MockPars.Domain.Models.User", "User")
                        .WithMany("Databases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MockPars.Domain.Models.RecordData", b =>
                {
                    b.HasOne("MockPars.Domain.Models.Columns", "Columns")
                        .WithMany("RecordData")
                        .HasForeignKey("ColumnsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Columns");
                });

            modelBuilder.Entity("MockPars.Domain.Models.Tables", b =>
                {
                    b.HasOne("MockPars.Domain.Models.Databases", "Databases")
                        .WithMany("Tables")
                        .HasForeignKey("DatabasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Databases");
                });

            modelBuilder.Entity("MockPars.Domain.Models.Columns", b =>
                {
                    b.Navigation("RecordData");
                });

            modelBuilder.Entity("MockPars.Domain.Models.Databases", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("MockPars.Domain.Models.Tables", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("MockPars.Domain.Models.User", b =>
                {
                    b.Navigation("Databases");
                });
#pragma warning restore 612, 618
        }
    }
}
